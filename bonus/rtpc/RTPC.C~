//////////////////////////////////////////
//
// Simulation of the BONuS RTPC
//
// Gabriel Charles
// gcharles@odu.edu
//
// 09/29/2016
//
///////////////////////////////////////////



#include <iostream>
#include <stdio.h>

#include <TApplication.h>
#include <TCanvas.h>
#include <TH1F.h>
#include <TH2F.h>
#include <TMath.h>
#include <TGeoManager.h>
#include <TGeoMaterial.h>
#include <TGeoMedium.h>
#include <TGeoVolume.h>
#include <TGeoBBox.h>
#include <TGeoTube.h>
#include <TGeoPcon.h>
#include <TGeoHalfSpace.h>
#include <TGeoMatrix.h>
#include <TGeoCompositeShape.h>

#include "GeometryRoot.hh"
#include "ViewGeometry.hh"
#include "ComponentAnsys123.hh"
#include "ViewField.hh"
#include "MediumMagboltz.hh"
#include "Sensor.hh"
#include "AvalancheMicroscopic.hh"
#include "AvalancheMC.hh"
#include "AvalancheMC.hh"
#include "Random.hh"
#include "Plotting.hh"
#include "MediumMagboltz.hh"
#include "FundamentalConstants.hh"
#include "ComponentAnalyticField.hh"
#include "ViewCell.hh"
#include "SolidBox.hh"
#include "SolidTube.hh"
#include "Sensor.hh"
#include "GeometrySimple.hh"
#include "TrackHeed.hh"
#include "ComponentElmer.hh"
#include "ViewFEMesh.hh"




using namespace Garfield;
using namespace std;

int main(int argc, char * argv[]) {

  TApplication app("app", &argc, argv);


//______________________________________________________________________________________________
//___________________________________________Variables__________________________________________
//______________________________________________________________________________________________

 // Magnetic field
  const double Bx = 0.; // Tesla
  const double By = 0.; // Tesla
  const double Bz = 5.; // Tesla

  // Set the initial position [cm] and starting time [ns].
  double x0 = 3.1, y0 = 0.0, z0 = 10.0, t0 = 0.;
  // Set the initial energy [eV].
  double e0 = 1;
  // Set the initial direction (x, y, z).
  // In case of a null vector, the direction is randomized.
  double dx0 = 0., dy0 = 0., dz0 = 0.;
  // Calculate an electron avalanche
  int ne, ni;
  int ne_tot;
  // Electron information after the avalanche
  Double_t x1, y1, z1, t1, e1;
  Int_t status;

//______________________________________________________________________________________________
//________________________________________ Canvas and plots ____________________________________
//______________________________________________________________________________________________

  TCanvas * c_field = new TCanvas("c_field", "c_field", 800, 600);
  TCanvas *c_driftT = new TCanvas("c_driftT","Drift time",800,600);
  TCanvas *c_energy = new TCanvas("c_energy","Energy Loss",800,600);
  //TCanvas *c_driftV = new TCanvas("c_driftV","Drift Velocity",800,600);
  TCanvas *c_phi = new TCanvas("c_phi","Lorentz angle",800,600);

  ViewField *viewfield = new ViewField();


    TH1D *h_driftT = new TH1D("h_driftT","Drit Time 2500 V (He_80_CO2_20)",30,0,0);
    TH1D *h_energy = new TH1D("h_energy","Energy Loss 2500 V (He_80_CO2_20)",30,0,0);
    //TH1D *h_driftV = new TH1D("h_driftV","Drift Velocity",30,0,0);
    TH1D *h_phi = new TH1D("h_phi","Lorentz angle 2500 V (He_80_CO2_20)",30,0,0);


  TF1 *gausfit = new TF1("gausfit","gaus",0,8000);


//_____________________________________________________________________________________________
//___________________________________________ Openings ________________________________________
//_____________________________________________________________________________________________

  // Setup the gas.
  MediumMagboltz* gas = new MediumMagboltz();
//  gas->LoadGasFile("gasFiles/He_100_DME_00.gas");
  gas->SetComposition("He",80.,"CO2",20.);
  gas->SetTemperature(291.);
  gas->SetPressure(754.8);
    gas->EnableDrift();                           // Allow for drifting in this medium
  gas->PrintGas();


  // Import an Elmer-created LEM and the weighting field for the readout electrode.
  ComponentElmer * elm = new ComponentElmer("RTPC/mesh.header","RTPC/mesh.elements","RTPC/mesh.nodes",
  "RTPC/dielectrics.dat","RTPC/RTPC.result","cm");
  elm->SetMedium(0,gas);
  elm->SetMagneticField(Bx,By,Bz);



//______________________________________________________________________________________________
//_____________________________________________ Code ___________________________________________
//______________________________________________________________________________________________


  // Assemble a Sensor object 
  Sensor* sensor = new Sensor(); 
  sensor->SetArea(-7.0,-7.0,-20.0,7.0,7.0,20.0);
  // Calculate the electric field using the Component object cmp
  sensor->AddComponent(elm);

  TCanvas *c_e = new TCanvas("Cell","Cell");
  ViewDrift* v_e = new ViewDrift();
  v_e->SetCanvas(c_e);
  v_e->SetArea(-7.0,-7.0,-20.0,7.0,7.0,20.0);
    

  // Evaluate the number of electrons in the avalanche
  AvalancheMicroscopic* aval = new AvalancheMicroscopic(); // did not get it to work with AvalancheMC()
  //AvalancheMC* aval = new AvalancheMC();
    aval->SetSensor(sensor);
  aval->EnablePlotting(v_e);
  aval->EnableMagneticField();
    


  for(int eve=0;eve<500;eve++){
    ne_tot=0;
    cout << "Event number: " << eve << endl;
    aval->AvalancheElectron(x0, y0, z0, t0, e0, dx0, dy0, dz0);
      
    // Get the number of electrons and ions in the avalanche.
    aval->GetAvalancheSize(ne, ni);
    ne_tot+=ne;
      
    if(0<aval->GetNumberOfElectronEndpoints()){
      for(int nava=0;nava<aval->GetNumberOfElectronEndpoints();nava++){
        aval->GetElectronEndpoint(nava, x0, y0, z0, t0, e0, x1, y1, z1, t1, e1, status);
          
        h_driftT->Fill(t1);
        h_energy->Fill(e0-e1);
        if(x1>0 || x1<0) h_phi->Fill(TMath::ATan(y1/x1));
      }
    }
    //if(0<ne_tot) h_size->Fill(ne_tot);
   //   v_e->Plot();
  }

	cout << "Potential: 3500" << endl;

//______________________________________________________________________________________________
//___________________________________________ Display __________________________________________
//______________________________________________________________________________________________


  //viewfield->SetComponent(elm);
  //viewfield->SetSensor(sensor);
  //viewfield->SetCanvas((TCanvas*)c_field->cd());
  //viewfield->SetWeightingFieldRange(0.0, 10000.0);

//  Field plot
//  c_field->cd();
//  viewfield->PlotContour();

  c_energy->cd();
    h_energy->Draw();
    h_energy->Fit("gausfit","Q");
    h_energy->GetXaxis()->SetTitle("Energy Loss [eV]");
cout << "Energy Loss" << endl;
cout << "Mean = " << gausfit->GetParameter(1) << ", Sigma = " << gausfit->GetParameter(2) << endl;

  c_driftT->cd();
    h_driftT->Draw();
    h_driftT->Fit("gausfit","Q");
cout << "Drift Time" << endl;
cout << "Mean = " << gausfit->GetParameter(1) << ", Sigma = " << gausfit->GetParameter(2) << endl;

  c_phi->cd();
    h_phi->Draw();
    h_phi->Fit("gausfit","Q");
cout << "Lorentz angle" << endl;
cout << "Mean = " << gausfit->GetParameter(1) << ", Sigma = " << gausfit->GetParameter(2) << endl;

  //c_pos->cd();
  //  h_pos->Draw();



  app.Run(kTRUE);

}
